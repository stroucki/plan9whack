#[cfg(test)]
/// generate random data vector to see if compression bails
pub fn random_data() -> String {
    let mut random = String::from(
        "PCqlI1VIpzyagtfxzFYoidhfHnAGA6dubI9j/ClS8nqj52vroaBmKDhuMBVT+gh6V0YFeUMLPAab
xP/KsvLo1g==",
    );
    random.retain(|c| !c.is_whitespace());
    random
}

#[cfg(test)]
/// generate ground truth compressed data vector from large_uncompressed_data()
pub fn large_compressed_data() -> String {
    let mut compressed = String::from(
        "OByN5jZXNzb3ISR0IBgCjsZTcZG9yX2lkgajsrc6tLcypLc6MrYJRjOB1EDMwtrS2PMGTYSjabzI
        ZWwScChh0FiA3GFtZYH8FpQpFJAht7kylComlJA0m5aaG5uYECGoKpAgEBmXGhgjpD0JRzOhlODg
        0tzPDIzEo2mkxyCxGyBngxNuG1NSHrGA4MDAuMDAwEoxmExmhlIHNpesJDgxOTIgS0ISjgaDyc2l
        jYWwg4mBgJRzNJiNkVHPCISjHIDgxwM4o4IYNDQFGE4Gkx+gy0tzS6NMQvAngkzODrg28srngUvs
        rwxsrg6NLe3eBOJbSyEDYyu0wI6IDEzEo7nD2LjYYY+wMhuQOzaykDIykDg5spA6ObGQNrm5EDgw
        spA2sbKQMbwccOBA5srgQNro5QZZ8GWEgY21vdoTOmGxmbEDG2MzY6ubQQMjo5kDCxuDSQNra8ED
        M8RKc4rQDMoCEDQ6EDo2kDgxQReXOYfOOeCBwZHBlMWdiIHKHbG4EDY2zAG5zdGFudF/IcwuTG0L
        7gyuTM2t7cQODKxOZAxRjcmVwX2dvb2Qgbm9wbCB4dG9wb2xvZ3mB0Om9w4Oer+w8HeAhA4NzSQO
        DG2Nrq2OLI4yVMrmbGhBFZpdG9yIGRzX2OJTtJu5wDZXPJXk1lfIHNkYmcgZm2XaftG5wmEMjHKV
        OKyumi+Y9AxkQPBlxmEx6WZwb3BjbnQgYWVzIHhzYXZlIGF2mLGJsxy2uTC3TnWFoZl+XJhYpdsl
        6+zMLq2OhAyuDEQNLc7Yvr7nQVNkS3RpII8L7m0MLI3u5A7Nza0kDM2Mrw4OTS3uTS6PMM3QgdnC
        RCBC+wshAzObO5sTD16sD2p1lSYm1pMSBoibIRK42z1oJGRAyuTa5+jgQOU6TiXN8UWR0aIOUUDD
        OKz72ycM6OYlZlHYRh11CzgcjKytvIf190aW1lcsTvaHPC+3tzZxIsjOA2fl9U+ySt7MzObLKLmw
        NrozEDtxpftWHVupGXRyaWN0ZWRfZ3XOjcJS+sRX3ZtY3MSjEdexsTTC+bWVsdIMNxA5uDKxujky
        r7tOl9AqX2BS/QWwNYnlwYaJ9sMY5trI5kDm7sLgzuZA6MLCQNLo2MS/QZOjS0NLoQObkxQebW1p
        b191bmtui4JRiN5nN7a0uGYObG5waFxlTi+SG+UBjY07QWX2FsaWdubWVudOhRhZGSU+NsJsPjM5
        IGJpo3PVC4sIDQ46EXZpcnR1YWwSjgbzvNYNrC3MLOy4jnQlAr6VGBj/4pUYGP7ajAy/KowMv/0H
        VGDL/xSowZftqMGn5VGDT/9B1Rgz/6fUYMzn/QVGTP9tRk2/Koybf/oOqMmn/T6jP+hyMv3cjIY/
        lUYMf/0HVGDX/xSox+7kZDP8qjBn/+g6owbf+KVGP3cjIa/lUYNf/0HVGDf/p9RgzMzkyLjIy8YF
        /iVGf3cjIb/lUZN//0BVGQ==",
    );
    compressed.retain(|c| !c.is_whitespace());
    compressed
}

#[cfg(test)]
/// generate ground truth uncompressed data vector from large_compressed_data()
pub fn large_uncompressed_data() -> String {
    let mut decompressed = String::from(
        "cHJvY2Vzc29yCTogMAp2ZW5kb3JfaWQJOiBHZW51aW5lSW50ZWwKY3B1IGZhbWlseQk6IDYKbW9k
        ZWwJCTogNjAKbW9kZWwgbmFtZQk6IEludGVsKFIpIENvcmUoVE0pIGk3LTQ3NzAgQ1BVIEAgMy40
        MEdIegpzdGVwcGluZwk6IDMKbWljcm9jb2RlCTogMHgxNgpjcHUgTUh6CQk6IDgwMC4wMDAKY2Fj
        aGUgc2l6ZQk6IDgxOTIgS0IKcGh5c2ljYWwgaWQJOiAwCnNpYmxpbmdzCTogOApjb3JlIGlkCQk6
        IDAKY3B1IGNvcmVzCTogNAphcGljaWQJCTogMAppbml0aWFsIGFwaWNpZAk6IDAKZnB1CQk6IHll
        cwpmcHVfZXhjZXB0aW9uCTogeWVzCmNwdWlkIGxldmVsCTogMTMKd3AJCTogeWVzCmZsYWdzCQk6
        IGZwdSB2bWUgZGUgcHNlIHRzYyBtc3IgcGFlIG1jZSBjeDggYXBpYyBzZXAgbXRyciBwZ2UgbWNh
        IGNtb3YgcGF0IHBzZTM2IGNsZmx1c2ggZHRzIGFjcGkgbW14IGZ4c3Igc3NlIHNzZTIgc3MgaHQg
        dG0gcGJlIHN5c2NhbGwgbnggcGRwZTFnYiByZHRzY3AgbG0gY29uc3RhbnRfdHNjIGFyY2hfcGVy
        Zm1vbiBwZWJzIGJ0cyByZXBfZ29vZCBub3BsIHh0b3BvbG9neSBub25zdG9wX3RzYyBjcHVpZCBh
        cGVyZm1wZXJmIHBuaSBwY2xtdWxxZHEgZHRlczY0IG1vbml0b3IgZHNfY3BsIHZteCBzbXggZXN0
        IHRtMiBzc3NlMyBzZGJnIGZtYSBjeDE2IHh0cHIgcGRjbSBwY2lkIHNzZTRfMSBzc2U0XzIgeDJh
        cGljIG1vdmJlIHBvcGNudCBhZXMgeHNhdmUgYXZ4IGYxNmMgcmRyYW5kIGxhaGZfbG0gYWJtIGNw
        dWlkX2ZhdWx0IGVwYiBpbnZwY2lkX3NpbmdsZSBwdGkgdHByX3NoYWRvdyB2bm1pIGZsZXhwcmlv
        cml0eSBlcHQgdnBpZCBlcHRfYWQgZnNnc2Jhc2UgdHNjX2FkanVzdCBibWkxIGhsZSBhdngyIHNt
        ZXAgYm1pMiBlcm1zIGludnBjaWQgcnRtIHhzYXZlb3B0IGR0aGVybSBpZGEgYXJhdCBwbG4gcHRz
        CnZteCBmbGFncwk6IHZubWkgcHJlZW1wdGlvbl90aW1lciBpbnZ2cGlkIGVwdF94X29ubHkgZXB0
        X2FkIGVwdF8xZ2IgZmxleHByaW9yaXR5IHRzY19vZmZzZXQgdnRwciBtdGYgdmFwaWMgZXB0IHZw
        aWQgdW5yZXN0cmljdGVkX2d1ZXN0IHBsZSBzaGFkb3dfdm1jcwpidWdzCQk6IGNwdV9tZWx0ZG93
        biBzcGVjdHJlX3YxIHNwZWN0cmVfdjIgc3BlY19zdG9yZV9ieXBhc3MgbDF0ZiBtZHMgc3dhcGdz
        IHRhYSBpdGxiX211bHRpaGl0IHNyYmRzIG1taW9fdW5rbm93bgpib2dvbWlwcwk6IDY3ODQuMjAK
        Y2xmbHVzaCBzaXplCTogNjQKY2FjaGVfYWxpZ25tZW50CTogNjQKYWRkcmVzcyBzaXplcwk6IDM5
        IGJpdHMgcGh5c2ljYWwsIDQ4IGJpdHMgdmlydHVhbApwb3dlciBtYW5hZ2VtZW50OgoKcHJvY2Vz
        c29yCTogMQp2ZW5kb3JfaWQJOiBHZW51aW5lSW50ZWwKY3B1IGZhbWlseQk6IDYKbW9kZWwJCTog
        NjAKbW9kZWwgbmFtZQk6IEludGVsKFIpIENvcmUoVE0pIGk3LTQ3NzAgQ1BVIEAgMy40MEdIegpz
        dGVwcGluZwk6IDMKbWljcm9jb2RlCTogMHgxNgpjcHUgTUh6CQk6IDgwMC4wMDAKY2FjaGUgc2l6
        ZQk6IDgxOTIgS0IKcGh5c2ljYWwgaWQJOiAwCnNpYmxpbmdzCTogOApjb3JlIGlkCQk6IDEKY3B1
        IGNvcmVzCTogNAphcGljaWQJCTogMgppbml0aWFsIGFwaWNpZAk6IDIKZnB1CQk6IHllcwpmcHVf
        ZXhjZXB0aW9uCTogeWVzCmNwdWlkIGxldmVsCTogMTMKd3AJCTogeWVzCmZsYWdzCQk6IGZwdSB2
        bWUgZGUgcHNlIHRzYyBtc3IgcGFlIG1jZSBjeDggYXBpYyBzZXAgbXRyciBwZ2UgbWNhIGNtb3Yg
        cGF0IHBzZTM2IGNsZmx1c2ggZHRzIGFjcGkgbW14IGZ4c3Igc3NlIHNzZTIgc3MgaHQgdG0gcGJl
        IHN5c2NhbGwgbnggcGRwZTFnYiByZHRzY3AgbG0gY29uc3RhbnRfdHNjIGFyY2hfcGVyZm1vbiBw
        ZWJzIGJ0cyByZXBfZ29vZCBub3BsIHh0b3BvbG9neSBub25zdG9wX3RzYyBjcHVpZCBhcGVyZm1w
        ZXJmIHBuaSBwY2xtdWxxZHEgZHRlczY0IG1vbml0b3IgZHNfY3BsIHZteCBzbXggZXN0IHRtMiBz
        c3NlMyBzZGJnIGZtYSBjeDE2IHh0cHIgcGRjbSBwY2lkIHNzZTRfMSBzc2U0XzIgeDJhcGljIG1v
        dmJlIHBvcGNudCBhZXMgeHNhdmUgYXZ4IGYxNmMgcmRyYW5kIGxhaGZfbG0gYWJtIGNwdWlkX2Zh
        dWx0IGVwYiBpbnZwY2lkX3NpbmdsZSBwdGkgdHByX3NoYWRvdyB2bm1pIGZsZXhwcmlvcml0eSBl
        cHQgdnBpZCBlcHRfYWQgZnNnc2Jhc2UgdHNjX2FkanVzdCBibWkxIGhsZSBhdngyIHNtZXAgYm1p
        MiBlcm1zIGludnBjaWQgcnRtIHhzYXZlb3B0IGR0aGVybSBpZGEgYXJhdCBwbG4gcHRzCnZteCBm
        bGFncwk6IHZubWkgcHJlZW1wdGlvbl90aW1lciBpbnZ2cGlkIGVwdF94X29ubHkgZXB0X2FkIGVw
        dF8xZ2IgZmxleHByaW9yaXR5IHRzY19vZmZzZXQgdnRwciBtdGYgdmFwaWMgZXB0IHZwaWQgdW5y
        ZXN0cmljdGVkX2d1ZXN0IHBsZSBzaGFkb3dfdm1jcwpidWdzCQk6IGNwdV9tZWx0ZG93biBzcGVj
        dHJlX3YxIHNwZWN0cmVfdjIgc3BlY19zdG9yZV9ieXBhc3MgbDF0ZiBtZHMgc3dhcGdzIHRhYSBp
        dGxiX211bHRpaGl0IHNyYmRzIG1taW9fdW5rbm93bgpib2dvbWlwcwk6IDY3ODQuMjAKY2xmbHVz
        aCBzaXplCTogNjQKY2FjaGVfYWxpZ25tZW50CTogNjQKYWRkcmVzcyBzaXplcwk6IDM5IGJpdHMg
        cGh5c2ljYWwsIDQ4IGJpdHMgdmlydHVhbApwb3dlciBtYW5hZ2VtZW50OgoKcHJvY2Vzc29yCTog
        Mgp2ZW5kb3JfaWQJOiBHZW51aW5lSW50ZWwKY3B1IGZhbWlseQk6IDYKbW9kZWwJCTogNjAKbW9k
        ZWwgbmFtZQk6IEludGVsKFIpIENvcmUoVE0pIGk3LTQ3NzAgQ1BVIEAgMy40MEdIegpzdGVwcGlu
        Zwk6IDMKbWljcm9jb2RlCTogMHgxNgpjcHUgTUh6CQk6IDgwMC4wMDAKY2FjaGUgc2l6ZQk6IDgx
        OTIgS0IKcGh5c2ljYWwgaWQJOiAwCnNpYmxpbmdzCTogOApjb3JlIGlkCQk6IDIKY3B1IGNvcmVz
        CTogNAphcGljaWQJCTogNAppbml0aWFsIGFwaWNpZAk6IDQKZnB1CQk6IHllcwpmcHVfZXhjZXB0
        aW9uCTogeWVzCmNwdWlkIGxldmVsCTogMTMKd3AJCTogeWVzCmZsYWdzCQk6IGZwdSB2bWUgZGUg
        cHNlIHRzYyBtc3IgcGFlIG1jZSBjeDggYXBpYyBzZXAgbXRyciBwZ2UgbWNhIGNtb3YgcGF0IHBz
        ZTM2IGNsZmx1c2ggZHRzIGFjcGkgbW14IGZ4c3Igc3NlIHNzZTIgc3MgaHQgdG0gcGJlIHN5c2Nh
        bGwgbnggcGRwZTFnYiByZHRzY3AgbG0gY29uc3RhbnRfdHNjIGFyY2hfcGVyZm1vbiBwZWJzIGJ0
        cyByZXBfZ29vZCBub3BsIHh0b3BvbG9neSBub25zdG9wX3RzYyBjcHVpZCBhcGVyZm1wZXJmIHBu
        aSBwY2xtdWxxZHEgZHRlczY0IG1vbml0b3IgZHNfY3BsIHZteCBzbXggZXN0IHRtMiBzc3NlMyBz
        ZGJnIGZtYSBjeDE2IHh0cHIgcGRjbSBwY2lkIHNzZTRfMSBzc2U0XzIgeDJhcGljIG1vdmJlIHBv
        cGNudCBhZXMgeHNhdmUgYXZ4IGYxNmMgcmRyYW5kIGxhaGZfbG0gYWJtIGNwdWlkX2ZhdWx0IGVw
        YiBpbnZwY2lkX3NpbmdsZSBwdGkgdHByX3NoYWRvdyB2bm1pIGZsZXhwcmlvcml0eSBlcHQgdnBp
        ZCBlcHRfYWQgZnNnc2Jhc2UgdHNjX2FkanVzdCBibWkxIGhsZSBhdngyIHNtZXAgYm1pMiBlcm1z
        IGludnBjaWQgcnRtIHhzYXZlb3B0IGR0aGVybSBpZGEgYXJhdCBwbG4gcHRzCnZteCBmbGFncwk6
        IHZubWkgcHJlZW1wdGlvbl90aW1lciBpbnZ2cGlkIGVwdF94X29ubHkgZXB0X2FkIGVwdF8xZ2Ig
        ZmxleHByaW9yaXR5IHRzY19vZmZzZXQgdnRwciBtdGYgdmFwaWMgZXB0IHZwaWQgdW5yZXN0cmlj
        dGVkX2d1ZXN0IHBsZSBzaGFkb3dfdm1jcwpidWdzCQk6IGNwdV9tZWx0ZG93biBzcGVjdHJlX3Yx
        IHNwZWN0cmVfdjIgc3BlY19zdG9yZV9ieXBhc3MgbDF0ZiBtZHMgc3dhcGdzIHRhYSBpdGxiX211
        bHRpaGl0IHNyYmRzIG1taW9fdW5rbm93bgpib2dvbWlwcwk6IDY3ODQuMjAKY2xmbHVzaCBzaXpl
        CTogNjQKY2FjaGVfYWxpZ25tZW50CTogNjQKYWRkcmVzcyBzaXplcwk6IDM5IGJpdHMgcGh5c2lj
        YWwsIDQ4IGJpdHMgdmlydHVhbApwb3dlciBtYW5hZ2VtZW50OgoKcHJvY2Vzc29yCTogMwp2ZW5k
        b3JfaWQJOiBHZW51aW5lSW50ZWwKY3B1IGZhbWlseQk6IDYKbW9kZWwJCTogNjAKbW9kZWwgbmFt
        ZQk6IEludGVsKFIpIENvcmUoVE0pIGk3LTQ3NzAgQ1BVIEAgMy40MEdIegpzdGVwcGluZwk6IDMK
        bWljcm9jb2RlCTogMHgxNgpjcHUgTUh6CQk6IDM5MDAuMDAwCmNhY2hlIHNpemUJOiA4MTkyIEtC
        CnBoeXNpY2FsIGlkCTogMApzaWJsaW5ncwk6IDgKY29yZSBpZAkJOiAzCmNwdSBjb3Jlcwk6IDQK
        YXBpY2lkCQk6IDYKaW5pdGlhbCBhcGljaWQJOiA2CmZwdQkJOiB5ZXMKZnB1X2V4Y2VwdGlvbgk6
        IHllcwpjcHVpZCBsZXZlbAk6IDEzCndwCQk6IHllcwpmbGFncwkJOiBmcHUgdm1lIGRlIHBzZSB0
        c2MgbXNyIHBhZSBtY2UgY3g4IGFwaWMgc2VwIG10cnIgcGdlIG1jYSBjbW92IHBhdCBwc2UzNiBj
        bGZsdXNoIGR0cyBhY3BpIG1teCBmeHNyIHNzZSBzc2UyIHNzIGh0IHRtIHBiZSBzeXNjYWxsIG54
        IHBkcGUxZ2IgcmR0c2NwIGxtIGNvbnN0YW50X3RzYyBhcmNoX3BlcmZtb24gcGVicyBidHMgcmVw
        X2dvb2Qgbm9wbCB4dG9wb2xvZ3kgbm9uc3RvcF90c2MgY3B1aWQgYXBlcmZtcGVyZiBwbmkgcGNs
        bXVscWRxIGR0ZXM2NCBtb25pdG9yIGRzX2NwbCB2bXggc214IGVzdCB0bTIgc3NzZTMgc2RiZyBm
        bWEgY3gxNiB4dHByIHBkY20gcGNpZCBzc2U0XzEgc3NlNF8yIHgyYXBpYyBtb3ZiZSBwb3BjbnQg
        YWVzIHhzYXZlIGF2eCBmMTZjIHJkcmFuZCBsYWhmX2xtIGFibSBjcHVpZF9mYXVsdCBlcGIgaW52
        cGNpZF9zaW5nbGUgcHRpIHRwcl9zaGFkb3cgdm5taSBmbGV4cHJpb3JpdHkgZXB0IHZwaWQgZXB0
        X2FkIGZzZ3NiYXNlIHRzY19hZGp1c3QgYm1pMSBobGUgYXZ4MiBzbWVwIGJtaTIgZXJtcyBpbnZw
        Y2lkIHJ0bSB4c2F2ZW9wdCBkdGhlcm0gaWRhIGFyYXQgcGxuIHB0cwp2bXggZmxhZ3MJOiB2bm1p
        IHByZWVtcHRpb25fdGltZXIgaW52dnBpZCBlcHRfeF9vbmx5IGVwdF9hZCBlcHRfMWdiIGZsZXhw
        cmlvcml0eSB0c2Nfb2Zmc2V0IHZ0cHIgbXRmIHZhcGljIGVwdCB2cGlkIHVucmVzdHJpY3RlZF9n
        dWVzdCBwbGUgc2hhZG93X3ZtY3MKYnVncwkJOiBjcHVfbWVsdGRvd24gc3BlY3RyZV92MSBzcGVj
        dHJlX3YyIHNwZWNfc3RvcmVfYnlwYXNzIGwxdGYgbWRzIHN3YXBncyB0YWEgaXRsYl9tdWx0aWhp
        dCBzcmJkcyBtbWlvX3Vua25vd24KYm9nb21pcHMJOiA2Nzg0LjIwCmNsZmx1c2ggc2l6ZQk6IDY0
        CmNhY2hlX2FsaWdubWVudAk6IDY0CmFkZHJlc3Mgc2l6ZXMJOiAzOSBiaXRzIHBoeXNpY2FsLCA0
        OCBiaXRzIHZpcnR1YWwKcG93ZXIgbWFuYWdlbWVudDoKCnByb2Nlc3Nvcgk6IDQKdmVuZG9yX2lk
        CTogR2VudWluZUludGVsCmNwdSBmYW1pbHkJOiA2Cm1vZGVsCQk6IDYwCm1vZGVsIG5hbWUJOiBJ
        bnRlbChSKSBDb3JlKFRNKSBpNy00NzcwIENQVSBAIDMuNDBHSHoKc3RlcHBpbmcJOiAzCm1pY3Jv
        Y29kZQk6IDB4MTYKY3B1IE1IegkJOiA4MDAuMDAwCmNhY2hlIHNpemUJOiA4MTkyIEtCCnBoeXNp
        Y2FsIGlkCTogMApzaWJsaW5ncwk6IDgKY29yZSBpZAkJOiAwCmNwdSBjb3Jlcwk6IDQKYXBpY2lk
        CQk6IDEKaW5pdGlhbCBhcGljaWQJOiAxCmZwdQkJOiB5ZXMKZnB1X2V4Y2VwdGlvbgk6IHllcwpj
        cHVpZCBsZXZlbAk6IDEzCndwCQk6IHllcwpmbGFncwkJOiBmcHUgdm1lIGRlIHBzZSB0c2MgbXNy
        IHBhZSBtY2UgY3g4IGFwaWMgc2VwIG10cnIgcGdlIG1jYSBjbW92IHBhdCBwc2UzNiBjbGZsdXNo
        IGR0cyBhY3BpIG1teCBmeHNyIHNzZSBzc2UyIHNzIGh0IHRtIHBiZSBzeXNjYWxsIG54IHBkcGUx
        Z2IgcmR0c2NwIGxtIGNvbnN0YW50X3RzYyBhcmNoX3BlcmZtb24gcGVicyBidHMgcmVwX2dvb2Qg
        bm9wbCB4dG9wb2xvZ3kgbm9uc3RvcF90c2MgY3B1aWQgYXBlcmZtcGVyZiBwbmkgcGNsbXVscWRx
        IGR0ZXM2NCBtb25pdG9yIGRzX2NwbCB2bXggc214IGVzdCB0bTIgc3NzZTMgc2RiZyBmbWEgY3gx
        NiB4dHByIHBkY20gcGNpZCBzc2U0XzEgc3NlNF8yIHgyYXBpYyBtb3ZiZSBwb3BjbnQgYWVzIHhz
        YXZlIGF2eCBmMTZjIHJkcmFuZCBsYWhmX2xtIGFibSBjcHVpZF9mYXVsdCBlcGIgaW52cGNpZF9z
        aW5nbGUgcHRpIHRwcl9zaGFkb3cgdm5taSBmbGV4cHJpb3JpdHkgZXB0IHZwaWQgZXB0X2FkIGZz
        Z3NiYXNlIHRzY19hZGp1c3QgYm1pMSBobGUgYXZ4MiBzbWVwIGJtaTIgZXJtcyBpbnZwY2lkIHJ0
        bSB4c2F2ZW9wdCBkdGhlcm0gaWRhIGFyYXQgcGxuIHB0cwp2bXggZmxhZ3MJOiB2bm1pIHByZWVt
        cHRpb25fdGltZXIgaW52dnBpZCBlcHRfeF9vbmx5IGVwdF9hZCBlcHRfMWdiIGZsZXhwcmlvcml0
        eSB0c2Nfb2Zmc2V0IHZ0cHIgbXRmIHZhcGljIGVwdCB2cGlkIHVucmVzdHJpY3RlZF9ndWVzdCBw
        bGUgc2hhZG93X3ZtY3MKYnVncwkJOiBjcHVfbWVsdGRvd24gc3BlY3RyZV92MSBzcGVjdHJlX3Yy
        IHNwZWNfc3RvcmVfYnlwYXNzIGwxdGYgbWRzIHN3YXBncyB0YWEgaXRsYl9tdWx0aWhpdCBzcmJk
        cyBtbWlvX3Vua25vd24KYm9nb21pcHMJOiA2Nzg0LjIwCmNsZmx1c2ggc2l6ZQk6IDY0CmNhY2hl
        X2FsaWdubWVudAk6IDY0CmFkZHJlc3Mgc2l6ZXMJOiAzOSBiaXRzIHBoeXNpY2FsLCA0OCBiaXRz
        IHZpcnR1YWwKcG93ZXIgbWFuYWdlbWVudDoKCnByb2Nlc3Nvcgk6IDUKdmVuZG9yX2lkCTogR2Vu
        dWluZUludGVsCmNwdSBmYW1pbHkJOiA2Cm1vZGVsCQk6IDYwCm1vZGVsIG5hbWUJOiBJbnRlbChS
        KSBDb3JlKFRNKSBpNy00NzcwIENQVSBAIDMuNDBHSHoKc3RlcHBpbmcJOiAzCm1pY3JvY29kZQk6
        IDB4MTYKY3B1IE1IegkJOiA4MDAuMDAwCmNhY2hlIHNpemUJOiA4MTkyIEtCCnBoeXNpY2FsIGlk
        CTogMApzaWJsaW5ncwk6IDgKY29yZSBpZAkJOiAxCmNwdSBjb3Jlcwk6IDQKYXBpY2lkCQk6IDMK
        aW5pdGlhbCBhcGljaWQJOiAzCmZwdQkJOiB5ZXMKZnB1X2V4Y2VwdGlvbgk6IHllcwpjcHVpZCBs
        ZXZlbAk6IDEzCndwCQk6IHllcwpmbGFncwkJOiBmcHUgdm1lIGRlIHBzZSB0c2MgbXNyIHBhZSBt
        Y2UgY3g4IGFwaWMgc2VwIG10cnIgcGdlIG1jYSBjbW92IHBhdCBwc2UzNiBjbGZsdXNoIGR0cyBh
        Y3BpIG1teCBmeHNyIHNzZSBzc2UyIHNzIGh0IHRtIHBiZSBzeXNjYWxsIG54IHBkcGUxZ2IgcmR0
        c2NwIGxtIGNvbnN0YW50X3RzYyBhcmNoX3BlcmZtb24gcGVicyBidHMgcmVwX2dvb2Qgbm9wbCB4
        dG9wb2xvZ3kgbm9uc3RvcF90c2MgY3B1aWQgYXBlcmZtcGVyZiBwbmkgcGNsbXVscWRxIGR0ZXM2
        NCBtb25pdG9yIGRzX2NwbCB2bXggc214IGVzdCB0bTIgc3NzZTMgc2RiZyBmbWEgY3gxNiB4dHBy
        IHBkY20gcGNpZCBzc2U0XzEgc3NlNF8yIHgyYXBpYyBtb3ZiZSBwb3BjbnQgYWVzIHhzYXZlIGF2
        eCBmMTZjIHJkcmFuZCBsYWhmX2xtIGFibSBjcHVpZF9mYXVsdCBlcGIgaW52cGNpZF9zaW5nbGUg
        cHRpIHRwcl9zaGFkb3cgdm5taSBmbGV4cHJpb3JpdHkgZXB0IHZwaWQgZXB0X2FkIGZzZ3NiYXNl
        IHRzY19hZGp1c3QgYm1pMSBobGUgYXZ4MiBzbWVwIGJtaTIgZXJtcyBpbnZwY2lkIHJ0bSB4c2F2
        ZW9wdCBkdGhlcm0gaWRhIGFyYXQgcGxuIHB0cwp2bXggZmxhZ3MJOiB2bm1pIHByZWVtcHRpb25f
        dGltZXIgaW52dnBpZCBlcHRfeF9vbmx5IGVwdF9hZCBlcHRfMWdiIGZsZXhwcmlvcml0eSB0c2Nf
        b2Zmc2V0IHZ0cHIgbXRmIHZhcGljIGVwdCB2cGlkIHVucmVzdHJpY3RlZF9ndWVzdCBwbGUgc2hh
        ZG93X3ZtY3MKYnVncwkJOiBjcHVfbWVsdGRvd24gc3BlY3RyZV92MSBzcGVjdHJlX3YyIHNwZWNf
        c3RvcmVfYnlwYXNzIGwxdGYgbWRzIHN3YXBncyB0YWEgaXRsYl9tdWx0aWhpdCBzcmJkcyBtbWlv
        X3Vua25vd24KYm9nb21pcHMJOiA2Nzg0LjIwCmNsZmx1c2ggc2l6ZQk6IDY0CmNhY2hlX2FsaWdu
        bWVudAk6IDY0CmFkZHJlc3Mgc2l6ZXMJOiAzOSBiaXRzIHBoeXNpY2FsLCA0OCBiaXRzIHZpcnR1
        YWwKcG93ZXIgbWFuYWdlbWVudDoKCnByb2Nlc3Nvcgk6IDYKdmVuZG9yX2lkCTogR2VudWluZUlu
        dGVsCmNwdSBmYW1pbHkJOiA2Cm1vZGVsCQk6IDYwCm1vZGVsIG5hbWUJOiBJbnRlbChSKSBDb3Jl
        KFRNKSBpNy00NzcwIENQVSBAIDMuNDBHSHoKc3RlcHBpbmcJOiAzCm1pY3JvY29kZQk6IDB4MTYK
        Y3B1IE1IegkJOiA4MDAuMDAwCmNhY2hlIHNpemUJOiA4MTkyIEtCCnBoeXNpY2FsIGlkCTogMApz
        aWJsaW5ncwk6IDgKY29yZSBpZAkJOiAyCmNwdSBjb3Jlcwk6IDQKYXBpY2lkCQk6IDUKaW5pdGlh
        bCBhcGljaWQJOiA1CmZwdQkJOiB5ZXMKZnB1X2V4Y2VwdGlvbgk6IHllcwpjcHVpZCBsZXZlbAk6
        IDEzCndwCQk6IHllcwpmbGFncwkJOiBmcHUgdm1lIGRlIHBzZSB0c2MgbXNyIHBhZSBtY2UgY3g4
        IGFwaWMgc2VwIG10cnIgcGdlIG1jYSBjbW92IHBhdCBwc2UzNiBjbGZsdXNoIGR0cyBhY3BpIG1t
        eCBmeHNyIHNzZSBzc2UyIHNzIGh0IHRtIHBiZSBzeXNjYWxsIG54IHBkcGUxZ2IgcmR0c2NwIGxt
        IGNvbnN0YW50X3RzYyBhcmNoX3BlcmZtb24gcGVicyBidHMgcmVwX2dvb2Qgbm9wbCB4dG9wb2xv
        Z3kgbm9uc3RvcF90c2MgY3B1aWQgYXBlcmZtcGVyZiBwbmkgcGNsbXVscWRxIGR0ZXM2NCBtb25p
        dG9yIGRzX2NwbCB2bXggc214IGVzdCB0bTIgc3NzZTMgc2RiZyBmbWEgY3gxNiB4dHByIHBkY20g
        cGNpZCBzc2U0XzEgc3NlNF8yIHgyYXBpYyBtb3ZiZSBwb3BjbnQgYWVzIHhzYXZlIGF2eCBmMTZj
        IHJkcmFuZCBsYWhmX2xtIGFibSBjcHVpZF9mYXVsdCBlcGIgaW52cGNpZF9zaW5nbGUgcHRpIHRw
        cl9zaGFkb3cgdm5taSBmbGV4cHJpb3JpdHkgZXB0IHZwaWQgZXB0X2FkIGZzZ3NiYXNlIHRzY19h
        ZGp1c3QgYm1pMSBobGUgYXZ4MiBzbWVwIGJtaTIgZXJtcyBpbnZwY2lkIHJ0bSB4c2F2ZW9wdCBk
        dGhlcm0gaWRhIGFyYXQgcGxuIHB0cwp2bXggZmxhZ3MJOiB2bm1pIHByZWVtcHRpb25fdGltZXIg
        aW52dnBpZCBlcHRfeF9vbmx5IGVwdF9hZCBlcHRfMWdiIGZsZXhwcmlvcml0eSB0c2Nfb2Zmc2V0
        IHZ0cHIgbXRmIHZhcGljIGVwdCB2cGlkIHVucmVzdHJpY3RlZF9ndWVzdCBwbGUgc2hhZG93X3Zt
        Y3MKYnVncwkJOiBjcHVfbWVsdGRvd24gc3BlY3RyZV92MSBzcGVjdHJlX3YyIHNwZWNfc3RvcmVf
        YnlwYXNzIGwxdGYgbWRzIHN3YXBncyB0YWEgaXRsYl9tdWx0aWhpdCBzcmJkcyBtbWlvX3Vua25v
        d24KYm9nb21pcHMJOiA2Nzg0LjIwCmNsZmx1c2ggc2l6ZQk6IDY0CmNhY2hlX2FsaWdubWVudAk6
        IDY0CmFkZHJlc3Mgc2l6ZXMJOiAzOSBiaXRzIHBoeXNpY2FsLCA0OCBiaXRzIHZpcnR1YWwKcG93
        ZXIgbWFuYWdlbWVudDoKCnByb2Nlc3Nvcgk6IDcKdmVuZG9yX2lkCTogR2VudWluZUludGVsCmNw
        dSBmYW1pbHkJOiA2Cm1vZGVsCQk6IDYwCm1vZGVsIG5hbWUJOiBJbnRlbChSKSBDb3JlKFRNKSBp
        Ny00NzcwIENQVSBAIDMuNDBHSHoKc3RlcHBpbmcJOiAzCm1pY3JvY29kZQk6IDB4MTYKY3B1IE1I
        egkJOiAzMzkyLjIyNApjYWNoZSBzaXplCTogODE5MiBLQgpwaHlzaWNhbCBpZAk6IDAKc2libGlu
        Z3MJOiA4CmNvcmUgaWQJCTogMwpjcHUgY29yZXMJOiA0CmFwaWNpZAkJOiA3CmluaXRpYWwgYXBp
        Y2lkCTogNwpmcHUJCTogeWVzCmZwdV9leGNlcHRpb24JOiB5ZXMKY3B1aWQgbGV2ZWwJOiAxMwp3
        cAkJOiB5ZXMKZmxhZ3MJCTogZnB1IHZtZSBkZSBwc2UgdHNjIG1zciBwYWUgbWNlIGN4OCBhcGlj
        IHNlcCBtdHJyIHBnZSBtY2EgY21vdiBwYXQgcHNlMzYgY2xmbHVzaCBkdHMgYWNwaSBtbXggZnhz
        ciBzc2Ugc3NlMiBzcyBodCB0bSBwYmUgc3lzY2FsbCBueCBwZHBlMWdiIHJkdHNjcCBsbSBjb25z
        dGFudF90c2MgYXJjaF9wZXJmbW9uIHBlYnMgYnRzIHJlcF9nb29kIG5vcGwgeHRvcG9sb2d5IG5v
        bnN0b3BfdHNjIGNwdWlkIGFwZXJmbXBlcmYgcG5pIHBjbG11bHFkcSBkdGVzNjQgbW9uaXRvciBk
        c19jcGwgdm14IHNteCBlc3QgdG0yIHNzc2UzIHNkYmcgZm1hIGN4MTYgeHRwciBwZGNtIHBjaWQg
        c3NlNF8xIHNzZTRfMiB4MmFwaWMgbW92YmUgcG9wY250IGFlcyB4c2F2ZSBhdnggZjE2YyByZHJh
        bmQgbGFoZl9sbSBhYm0gY3B1aWRfZmF1bHQgZXBiIGludnBjaWRfc2luZ2xlIHB0aSB0cHJfc2hh
        ZG93IHZubWkgZmxleHByaW9yaXR5IGVwdCB2cGlkIGVwdF9hZCBmc2dzYmFzZSB0c2NfYWRqdXN0
        IGJtaTEgaGxlIGF2eDIgc21lcCBibWkyIGVybXMgaW52cGNpZCBydG0geHNhdmVvcHQgZHRoZXJt
        IGlkYSBhcmF0IHBsbiBwdHMKdm14IGZsYWdzCTogdm5taSBwcmVlbXB0aW9uX3RpbWVyIGludnZw
        aWQgZXB0X3hfb25seSBlcHRfYWQgZXB0XzFnYiBmbGV4cHJpb3JpdHkgdHNjX29mZnNldCB2dHBy
        IG10ZiB2YXBpYyBlcHQgdnBpZCB1bnJlc3RyaWN0ZWRfZ3Vlc3QgcGxlIHNoYWRvd192bWNzCmJ1
        Z3MJCTogY3B1X21lbHRkb3duIHNwZWN0cmVfdjEgc3BlY3RyZV92MiBzcGVjX3N0b3JlX2J5cGFz
        cyBsMXRmIG1kcyBzd2FwZ3MgdGFhIGl0bGJfbXVsdGloaXQgc3JiZHMgbW1pb191bmtub3duCmJv
        Z29taXBzCTogNjc4NC4yMApjbGZsdXNoIHNpemUJOiA2NApjYWNoZV9hbGlnbm1lbnQJOiA2NAph
        ZGRyZXNzIHNpemVzCTogMzkgYml0cyBwaHlzaWNhbCwgNDggYml0cyB2aXJ0dWFsCnBvd2VyIG1h
        bmFnZW1lbnQ6Cgo=",
    );
    decompressed.retain(|c| !c.is_whitespace());
    decompressed
}
